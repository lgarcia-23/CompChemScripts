#!/bin/bash
# Purpose: Display distances
# Requires the `coord` Turbomole output file
#

################################################################### Help display
help() {
    local script_name=$(basename "$0")  
    echo
    echo "Usage: $script_name [options...] atom_index"
    echo
    echo "Optional arguments:"
    echo "-h, --help                Display this message again :3"
    echo "-c, --centroid  <index>   Calculate centroid distance [Can be list]"
    echo
}

#################################################################### Parse flags
centroid=""
while :; do
  case $1 in
    -h|--help)
      help
      exit ;;
    -c|--centroid)
      centroid=$2
      shift ;;
    --)
      shift
      break ;;
    -?*)
      printf 'WARN: Unknown option (ignoring): %s\n' "$1" >&2 ;;
    *)
      break ;;
  esac
  shift
done

############################################################### Parse coord file
if [ ! -f coord ] ; then
  printf 'WARN: coord file not found ! (exiting program) \n' >&2
  exit 1
fi
atom_index=$1

cat >> dist.awk << EOF
function distance(atom1,atom2)
{
  dx = coord[atom1,1] - coord[atom2,1];
  dy = coord[atom1,2] - coord[atom2,2];
  dz = coord[atom1,3] - coord[atom2,3];
  return sqrt(dx * dx + dy * dy + dz * dz)
}

function average(atom)
{
  sx = centroid[1] + coord[atom,1];
  sy = centroid[2] + coord[atom,2];
  sz = centroid[3] + coord[atom,3];
  centroid[1] = sx / 2;
  centroid[2] = sy / 2;
  centroid[3] = sz / 2;
}

BEGIN {
  i = 0;
  FORMAT = "%2d %2s -- %2d %2s = %.3f pm\n";
  BOHR = 52.917720859;
}

/\s+([[:lower:]]{1,2}$)/ {
  i = i + 1;
  coord[i,1] = \$1;
  coord[i,2] = \$2;
  coord[i,3] = \$3;
  atom[i] = \$4;
}
EOF

###################################################################### Centroid 
echo "END {" >> dist.awk

if [[ ! -z $centroid ]] ; then
  iter=$(echo $centroid | grep -o "," | wc -l)

  init=$(echo $centroid | cut -d "," -f 1)
  echo "centroid[1] = coord[$init,1];" >> dist.awk
  echo "centroid[2] = coord[$init,2];" >> dist.awk
  echo "centroid[3] = coord[$init,3];" >> dist.awk

  for (( i=1; i<=(($iter+1)); i++ ))
  do
    cent=$(echo $centroid | cut -d "," -f $i)
    echo "average($cent);" >> dist.awk
  done
    echo "coord[$i,1] = centroid[1];" >> dist.awk
    echo "coord[$i,2] = centroid[2];" >> dist.awk
    echo "coord[$i,3] = centroid[3];" >> dist.awk
    echo "dist = distance(atom_index,$i);" >> dist.awk
    echo "printf(FORMAT,atom_index,atom[atom_index],$i-1,atom[$i],\
      dist * BOHR);">> dist.awk
else
  cat >> dist.awk << EOF
  for (j = 1; j <= i; j++) {
    dist = distance(atom_index,j);
    printf(FORMAT,atom_index,atom[atom_index],j,atom[j],dist * BOHR);
  }
EOF
fi

echo "}" >> dist.awk

awk -v atom_index="$atom_index" -f 'dist.awk' coord
rm dist.awk
